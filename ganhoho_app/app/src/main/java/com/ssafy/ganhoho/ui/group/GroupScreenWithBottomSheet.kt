package com.ssafy.ganhoho.ui.group

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.DropdownMenu
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ModalBottomSheet
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.rememberModalBottomSheetState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.ssafy.ganhoho.R
import com.ssafy.ganhoho.viewmodel.BottomNavViewModel
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GroupBottomSheet(
    isSheetOpen: Boolean,
    onDismiss: () -> Unit,
    viewModel: BottomNavViewModel,
    onAddGroup: (String, Int) -> Unit,
) {
    val bottomSheetState = rememberModalBottomSheetState(skipPartiallyExpanded = true)
    val coroutineScope = rememberCoroutineScope()

    // Î∞îÌÖÄÏãúÌä∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
    LaunchedEffect(isSheetOpen) {
        if (isSheetOpen) {
            coroutineScope.launch { bottomSheetState.show() }
        } else {
            coroutineScope.launch { bottomSheetState.hide() }
        }
    }

    // Î∞∞Í≤ΩÏùÑ Ïñ¥Îë°Í≤å (scrimColor ÏÑ§Ï†ï)
    ModalBottomSheet(
        onDismissRequest = {
            viewModel.showBottomNav()
            onDismiss()
        },
        sheetState = bottomSheetState,
        shape = RoundedCornerShape(topStart = 30.dp, topEnd = 30.dp), // ÏÉÅÎã® Î™®ÏÑúÎ¶¨ Îë•Í∏ÄÍ≤å
        containerColor = Color.White, // Î∞îÌÖÄÏãúÌä∏ Î∞∞Í≤ΩÏùÑ Ìù∞ÏÉâÏúºÎ°ú
        scrimColor = Color.Black.copy(alpha = 0.5f) // Î∞îÌÖÄÏãúÌä∏ Ïô∏ Î∞∞Í≤ΩÏùÑ Î∞òÌà¨Î™Ö Ïñ¥Îë°Í≤å ÏÑ§Ï†ï
    ) {
        GroupBottomSheetContent(viewModel, onDismiss, onAddGroup)
    }
}

fun getGroupIconResource(groupIconType: Int): Int {
    //Log.d("GroupIcon", "üîç Received groupIconType: $groupIconType")

    val validIcons = mapOf(
        1 to R.drawable.emoji_hospital,
        2 to R.drawable.emoji_dragon,
        3 to R.drawable.emoji_school,
        4 to R.drawable.emoji_heart_white,
        5 to R.drawable.emoji_beer,
        6 to R.drawable.emoji_star
    )

    return validIcons[groupIconType] ?: run {
        Log.w("GroupIcon", "‚ö†Ô∏è Warning: Invalid groupIconType received -> $groupIconType. Using default icon.")
        R.drawable.emoji_nurse // Í∏∞Î≥∏ ÏïÑÏù¥ÏΩò
    }
}



@Composable
fun GroupBottomSheetContent(
    viewModel: BottomNavViewModel,
    onClose: () -> Unit,
    onAddGroup: (String, Int) -> Unit,
) {
    var groupName by remember { mutableStateOf(TextFieldValue("")) }
    var selectedIcon by remember { mutableStateOf(1) }
    var isDropdownExpanded by remember { mutableStateOf(false) }

    val iconList = listOf(1,2,3,4,5,6)


    Column(
        modifier = Modifier
            .height(340.dp)
            .padding(top = 10.dp)
            .background(
                color = Color.White,
                shape = RoundedCornerShape(topStart = 30.dp, topEnd = 30.dp)
            )
            .shadow(
                elevation = 20.dp,
                spotColor = Color(0x26000000),
                ambientColor = Color(0x26000000)
            ),
        horizontalAlignment = Alignment.Start
    ) {
        Column(
            modifier = Modifier
                .padding(start = 20.dp, end = 20.dp)

        ) {
            Text(
                "Í∑∏Î£π Ï†ïÎ≥¥ ÏûÖÎ†•",
                fontSize = 20.sp,
                color = Color.Black,
                modifier = Modifier.padding(vertical = 10.dp),
                fontWeight = FontWeight.Bold
            )

            Spacer(modifier = Modifier.height(10.dp))

            // Ïù¥Î™®ÏßÄ ÏÑ†ÌÉù Î≤ÑÌäº
            Row(
                modifier = Modifier
                    .height(49.dp)
                    .width(85.dp)
                    .border(1.dp, Color.LightGray, RoundedCornerShape(12.dp))
                    .padding(12.dp)
                    .padding(start = 5.dp, end = 2.dp)
                    .clickable { isDropdownExpanded = true }, //ÌÅ¥Î¶≠ÌïòÎ©¥ ÎìúÎ°≠Îã§Ïö¥ Ïó¥Î¶º
                verticalAlignment = Alignment.CenterVertically
            ){
                Image(
                    painter = painterResource(id = getGroupIconResource(selectedIcon)),
                    contentDescription="ÏÑ†ÌÉùÎêú ÏïÑÏù¥ÏΩò",
                    modifier = Modifier.size(24.dp)
                )

                Spacer(modifier = Modifier.weight(1f))

                Image(
                    painter = painterResource(id = R.drawable.icon_dropdown),
                    contentDescription = "ÎìúÎ°≠Îã§Ïö¥ Î≤ÑÌäº",
                    modifier = Modifier.size(24.dp)
                )
            }

            //ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥
            DropdownMenu(
                expanded = isDropdownExpanded,
                onDismissRequest = { isDropdownExpanded = false },
                Modifier
                    .background(Color.White, shape = RoundedCornerShape(12.dp))
                    .align(Alignment.CenterHorizontally)
                    .width(72.dp)
            ) {
                iconList.forEach{iconId ->
                    DropdownMenuItem(
                        onClick = {
                            selectedIcon = iconId
                            isDropdownExpanded = false
                        },
                        text = {
                            Row(
                                verticalAlignment = Alignment.CenterVertically,
                                modifier = Modifier.padding(horizontal = 10.dp, vertical = 5.dp)

                            ){
                                Image(
                                    painter = painterResource(id = getGroupIconResource(iconId)),
                                    contentDescription = "ÏïÑÏù¥ÏΩò $iconId",
                                    modifier = Modifier.size(25.dp)
                                )
                            }
                        }
                    )
                }
            }


            Spacer(modifier = Modifier.height(16.dp))

            // Í∑∏Î£π Ïù¥Î¶Ñ ÏûÖÎ†• ÌïÑÎìú
            OutlinedTextField(
                value = groupName,
                onValueChange = {
                    if (it.text.length <= 8) {
                        groupName = it
                    }
                },
                placeholder = {
                    Text(
                        "Í∑∏Î£π Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.",
                        color = Color(0xFFB5B5B5),
                        fontSize = 13.sp
                    ) },
                shape = RoundedCornerShape(12.dp),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(55.dp)
                    .border(1.dp, Color.LightGray, RoundedCornerShape(12.dp))
                    .background(Color.White)
            )


            // Í∑∏Î£π Ïù¥Î¶Ñ Í¥ÄÎ†® Í∏ÄÏûê Ïàò Ï†úÌïú ÏïàÎÇ¥ Î¨∏Íµ¨
            Text("8Ïûê Ïù¥ÎÇ¥Î°ú ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.",
                color=Color(0xFF717171),
                fontSize = 12.sp,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(end = 5.dp),
                textAlign = TextAlign.Right)

            Spacer(modifier = Modifier.height(16.dp))
        }



        // Í∑∏Î£π ÎßåÎì§Í∏∞ Î≤ÑÌäº
        Button(
            onClick = {
                if (groupName.text.isNotBlank()) {
                    onAddGroup(groupName.text, selectedIcon)
                    onClose()
                }
            },
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF79C7E3)),
            shape = RoundedCornerShape(13.dp),
            modifier = Modifier
                .fillMaxWidth()
                .height(53.dp)
                .padding(horizontal = 20.dp) // Ï¢åÏö∞ Ïó¨Î∞± Ï∂îÍ∞Ä
                .shadow(elevation = 10.dp, shape = RoundedCornerShape(13.dp), clip = false)
        ) {
            Text("Í∑∏Î£π ÎßåÎì§Í∏∞", color = Color.White, fontSize = 18.sp, textAlign = TextAlign.Center)
        }


    }
}

//@Preview(showBackground = true)
//@Composable
//fun GroupBottomSheetPreview() {
//
//
//    GroupBottomSheet(
//        isSheetOpen = true, // Î∞îÌÖÄÏãúÌä∏Í∞Ä Ìï≠ÏÉÅ Ïó¥Î¶¨ÎèÑÎ°ù ÏÑ§Ï†ï
//        onDismiss = { },
//        viewModel = fakeBottomNavViewModel,
//        onAddGroup = { _, _ -> }
//    )
//}
