package com.ssafy.ganhoho.ui.group

import android.util.Log
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.animation.slideInHorizontally
import androidx.compose.animation.slideOutHorizontally
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Divider
import androidx.compose.material.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.zIndex
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.ViewModelStoreOwner
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.ssafy.ganhoho.R
import com.ssafy.ganhoho.base.TokenManager
import com.ssafy.ganhoho.data.model.dto.group.GroupDto
import com.ssafy.ganhoho.data.model.dto.group.WorkScheduleDto
import com.ssafy.ganhoho.data.model.response.group.GroupMemberResponse
import com.ssafy.ganhoho.data.model.response.group.GroupViewModelFactory
import com.ssafy.ganhoho.repository.GroupRepository
import com.ssafy.ganhoho.viewmodel.AuthViewModel
import com.ssafy.ganhoho.viewmodel.GroupViewModel
import java.time.LocalDate
import java.time.format.TextStyle
import java.util.Locale


@Composable
fun EachGroupScreen(
    navController: NavController,
    group: GroupDto,
    groupMember: List<GroupMemberResponse>,
    repository: GroupRepository,
    groupId: Int?,
    yearMonth: String
) {

    val authViewModel: AuthViewModel = viewModel()
    val viewModel: GroupViewModel = ViewModelProvider(
        LocalContext.current as ViewModelStoreOwner,
        GroupViewModelFactory(repository)
    )[GroupViewModel::class.java]

    val currentDate = LocalDate.now()
    val currentYear = currentDate.year
    val currentMonth = currentDate.monthValue
    val today = LocalDate.now() // Ïò§Îäò ÎÇ†Ïßú Í∞ÄÏ†∏Ïò§Í∏∞

    val calendarDays = getCalendarDays(currentYear, currentMonth)
    val weeks = calendarDays.chunked(7)

    var isMemberScreenVisible by remember { mutableStateOf(false) }
    var isDialogVisible by remember { mutableStateOf(false) } // Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÏÉÅÌÉú Ï∂îÍ∞Ä

    val memberSchedules by viewModel.memberSchedules.collectAsState()
    var inviteLink by rememberSaveable { mutableStateOf("") }


    val token = authViewModel.accessToken.collectAsState().value
    val context = LocalContext.current

    LaunchedEffect(token) {
        if (token.isNullOrEmpty()) {
            authViewModel.loadTokens(context)
        } else {
            Log.d("token", token)
        }
    }

    LaunchedEffect(token) {
        if (groupId != null && token != null) {
            viewModel.fetchMemberSchedules(groupId, yearMonth, token)
            viewModel.fetchMemberList(groupId, token)
        }
    }

    LaunchedEffect(groupId) {
        if (groupId != 0) {
            if (groupId != null && token != null) {
                viewModel.fetchMemberSchedules(groupId, yearMonth, token)
                viewModel.fetchMemberList(groupId, token)
            }
            Log.d("DEBUG", "Fetching schedules for groupId: $groupId, yearMonth: $yearMonth")

        } else {
            val inviteCode = navController.currentBackStackEntry?.arguments?.getString("inviteCode")
            if (inviteCode.isNullOrEmpty()) {
                Log.d("group_invite", "Ï¥àÎåÄ ÏΩîÎìú Í∞êÏßÄ: $inviteCode")

                if (token != null) {
                    viewModel.fetchGroupInviteLink(token, groupId,
                        onSuccess = { link ->
                            inviteLink = "ssafyd209://ganhoho/group?groupCode=$link"
                        },
                        onFailure = { error ->
                            Log.e("GroupMemberScreen", "Ï¥àÎåÄ ÎßÅÌÅ¨ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®: $error")
                        })
                }
            }
        }
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(10.dp)
        ) {
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(top = 39.dp, start = 10.dp, end = 15.dp, bottom = 60.dp)
            ) {
                item {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(8.dp),
                        verticalAlignment = Alignment.Bottom
                    ) {
                        val groupIcon = getGroupIconResource(group.groupIconType)

                        Image(
                            painter = painterResource(groupIcon),
                            contentDescription = "Í∑∏Î£π ÏïÑÏù¥ÏΩò",
                            modifier = Modifier
                                .size(35.dp)
                                .padding(bottom = 5.dp)
                        )
                        Text(  // Í∑∏Î£π Ïù¥Î¶Ñ
                            text = group.groupName,
                            fontSize = 30.sp,
                            fontWeight = FontWeight.Bold
                        )

                        Row(  // Í∑∏Î£πÏõê Î™©Î°ù Ïó¥Í∏∞
                            horizontalArrangement = Arrangement.Start,
                            verticalAlignment = Alignment.CenterVertically,
                            modifier = Modifier
                                .padding(bottom = 2.dp)
                                .clickable {
                                    if (!isMemberScreenVisible) { // Ïù¥ÎØ∏ Ïó¥Î†§ ÏûàÏúºÎ©¥ Îã§Ïãú Î≥ÄÍ≤ΩÌïòÏßÄ ÏïäÏùå
                                        Log.d("EachGroupScreen", "üîÑ Í∑∏Î£πÏõê Î™©Î°ù Ïó¥Í∏∞")

                                        isMemberScreenVisible = true
                                    }
                                }

                        ) {
                            Image(
                                painter = painterResource(R.drawable.icon_group_person),
                                contentDescription = "Í∑∏Î£π Ïù∏Ïõê Ïàò",
                                modifier = Modifier.size(17.dp)
                            )

                            Text(
                                text = "${group.groupMemberCount}",
                                fontSize = 12.sp,
                                color = Color.Gray,
                                modifier = Modifier.padding(start = 4.dp)
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(start = 60.dp),
                        horizontalArrangement = Arrangement.SpaceEvenly
                    ) {
                        listOf("Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†").forEach { day ->
                            Text(
                                text = day,
                                fontSize = 14.sp,
                                textAlign = TextAlign.Center,
                                fontWeight = if (day == LocalDate.now().dayOfWeek.getDisplayName(
                                        TextStyle.SHORT, Locale.KOREAN
                                    )
                                ) FontWeight.Bold else FontWeight.Normal,
                                color = if (day == "Ïùº") Color(0xFFE61818) else Color.Black,
                                modifier = Modifier.weight(1f)
                            )
                        }
                    }

                    Divider(
                        color = Color(0xFFE0E0E0),
                        thickness = 0.7.dp,
                        modifier = Modifier
                            .padding(vertical = 4.dp, horizontal = 8.dp)
                            .padding(top = 14.dp, bottom = 13.dp)
                    )
                }

                val adjustedSchedules = memberSchedules.map {
                    Log.d(
                        "DEBUG_MEMBER_SCHEDULE",
                        "Member: ${it.name}, Schedule Size: ${it.schedules.size}"
                    )

                    it.copy(
                        schedules = adjustWorkSchedule(
                            it.schedules,
                            currentYear,
                            currentMonth
                        ),
                        ward = it.ward ?: "ÎØ∏Ï†ï"
                    )
                }


                itemsIndexed(weeks) { weekIndex, weekDays ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(start = 60.dp),
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.SpaceEvenly
                    ) {
                        weekDays.forEach { date ->
                            Text(
                                text = date.ifEmpty { " " },
                                fontSize = 16.sp,
                                textAlign = TextAlign.Center,
                                fontWeight = if (date == today.dayOfMonth.toString()) FontWeight.Bold else FontWeight.Normal, // Ïò§Îäò ÎÇ†ÏßúÎäî ÍµµÍ≤å
                                color = if (date == today.dayOfMonth.toString()) Color(
                                    0xFF1A85AB
                                ) else Color.Black, // Ïò§Îäò ÎÇ†ÏßúÎäî ÍµµÍ≤å

                                modifier = Modifier
                                    .padding(top = 10.dp, bottom = 5.dp)
                                    .weight(1f)

                            )
                        }
                    }

                    adjustedSchedules.forEach { schedule ->
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(32.dp)
                        ) {
                            Text(
                                text = schedule.name,
                                fontSize = 12.sp,
                                fontWeight = FontWeight.Bold,
                                textAlign = TextAlign.Center,
                                modifier = Modifier.width(60.dp)
                            )

                            val weekSchedule =
                                schedule.schedules.chunked(7).getOrNull(weekIndex)
                                    ?: emptyList()

                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.spacedBy(4.dp)
                            ) {
                                weekDays.forEachIndexed { index, _ ->
                                    val workSchedule = weekSchedule.getOrNull(index)

                                    Box(
                                        contentAlignment = Alignment.Center,
                                        modifier = Modifier
                                            .background(
                                                getShiftColor(workSchedule?.workType ?: ""),
                                                shape = RoundedCornerShape(5.dp)
                                            )
                                            .height(24.dp)
                                            .weight(1f)
                                    ) {
                                        Text(
                                            text = workSchedule?.workType ?: "",
                                            fontSize = 10.sp,
                                            fontWeight = FontWeight.Medium,
                                            color = Color.Black,
                                            modifier = Modifier.padding(end = 10.dp),
                                            textAlign = TextAlign.Start
                                        )
                                    }
                                }
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(8.dp))
                }
            }
        }

        val backgroundAlpha by animateFloatAsState(
            targetValue = if (isMemberScreenVisible) 0.3f else 0f,
            animationSpec = tween(durationMillis = 300)
        )

        if (isMemberScreenVisible || backgroundAlpha > 0f) {
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .background(Color.Black.copy(alpha = backgroundAlpha))
                    .clickable {
                        if (isMemberScreenVisible) {  // ÌòÑÏû¨ Ïó¥Î†§ ÏûàÏùÑ ÎïåÎßå Îã´Ïùå
                            isMemberScreenVisible = false
                        }
                    }
            )

        }


        AnimatedVisibility(
            visible = isMemberScreenVisible,
            enter = slideInHorizontally(
                initialOffsetX = { it },
                animationSpec = tween(800)
            ),
            exit = slideOutHorizontally(targetOffsetX = { it }, animationSpec = tween(800)),
            modifier = Modifier
                .zIndex(2f)
        ) {
            // ÏÇ¨Ïù¥Îìú Î©îÎâ¥ (Í∑∏Î£πÏõê Î¶¨Ïä§Ìä∏)
            group.groupId?.let {
                GroupMemberScreen(
                    members = groupMember,
                    isVisible = isMemberScreenVisible,
                    onClose = {
                        isMemberScreenVisible = false
                    },

                    navController = navController,
                    groupId = it,
                    viewModel = viewModel,
                    repository = repository,
                    tokenManager = TokenManager,
                    group = group
                )
            }

            // Îã§Ïù¥ÏñºÎ°úÍ∑∏ (Í∑∏Î£π ÌÉàÌá¥)
            GroupLeaveDialog(
                isVisible = isDialogVisible,
                onConfirm = {
                    isDialogVisible = false // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
                },
                onDismiss = {
                    isDialogVisible = false
                },
                navController = navController,
                repository = repository,
                group = group
            )
        }
    }
}

fun adjustWorkSchedule(
    schedule: List<WorkScheduleDto?>,
    year: Int,
    month: Int
): List<WorkScheduleDto?> {
    val firstDayOfWeek = getFirstDayOfWeek(year, month)
    val adjustedSchedule = mutableListOf<WorkScheduleDto?>()

    // üîπ ÏãúÏûë ÏöîÏùºÏóê ÎßûÏ∂∞ Îπà Í∞í Ï∂îÍ∞Ä
    repeat(firstDayOfWeek) { adjustedSchedule.add(null) }

    // üîπ Í∏∞Ï°¥ Ïä§ÏºÄÏ§ÑÏùÑ Ï∂îÍ∞Ä
    adjustedSchedule.addAll(schedule)

    // üîπ ÎßàÏßÄÎßâ Ï£ºÍ∞Ä 7Í∞úÎ°ú ÎßûÏ∂∞ÏßÄÎèÑÎ°ù Îπà Í∞í Ï∂îÍ∞Ä
    while (adjustedSchedule.size % 7 != 0) {
        adjustedSchedule.add(null)
    }

    Log.d("DEBUG_ADJUST_SCHEDULE", "Adjusted Schedule: ${adjustedSchedule.size} items")

    return adjustedSchedule
}

// ‚úÖ ÏãúÏûë ÏöîÏùºÏùÑ Î∞òÏòÅÌïòÏó¨ Îã¨Î†• ÎÇ†Ïßú ÏÉùÏÑ±
fun getCalendarDays(year: Int, month: Int): List<String> {
    val firstDayOfWeek = getFirstDayOfWeek(year, month)  // Ïù¥Î≤à Îã¨ ÏãúÏûë ÏöîÏùº
    val daysInMonth = LocalDate.of(year, month, 1).lengthOfMonth()  // Ïù¥Î≤à Îã¨ Ï¥ù ÏùºÏàò

    val calendarDays = mutableListOf<String>()

    // üîπ ÏãúÏûë ÏöîÏùº Ï†ÑÍπåÏßÄ Îπà Ïπ∏ Ï∂îÍ∞Ä
    repeat(firstDayOfWeek) { calendarDays.add("") }

    // üîπ 1ÏùºÎ∂ÄÌÑ∞ ÎßàÏßÄÎßâ ÎÇ†ÍπåÏßÄ Ï∂îÍ∞Ä
    for (day in 1..daysInMonth) {
        calendarDays.add(day.toString())
    }

    // üîπ ÎßàÏßÄÎßâ Ï£ºÎèÑ 7Í∞úÎ°ú ÎßûÏ∂îÍ∏∞ ÏúÑÌï¥ Îπà Ïπ∏ Ï∂îÍ∞Ä
    while (calendarDays.size % 7 != 0) {
        calendarDays.add("")
    }

    return calendarDays
}

// Ïù¥Î≤à Îã¨Ïùò ÏãúÏûë ÏöîÏùº Íµ¨ÌïòÍ∏∞
fun getFirstDayOfWeek(year: Int, month: Int): Int {
    val firstDay = LocalDate.of(year, month, 1)
    return firstDay.dayOfWeek.value % 7  // ÏõîÏöîÏùº(1)~ÏùºÏöîÏùº(7) ‚Üí ÏùºÏöîÏùº(0)~ÌÜ†ÏöîÏùº(6)Î°ú Î≥ÄÌôò
}

// Í∑ºÎ¨¥ Ïú†ÌòïÎ≥Ñ Î∞∞Í≤ΩÏÉâ ÏÑ§Ï†ï
fun getShiftColor(shift: String): Color {
    return when (shift) {
        "N" -> Color(0xFFDDD4CE) // Î∞§ Í∑ºÎ¨¥ (ÌöåÏÉâ)
        "OF" -> Color(0xFFFCD6C8) // Ìú¥Î¨¥ (Ïó∞Ìïú Îπ®Í∞ï)
        "E" -> Color(0xFFE4C7F1) // Ï†ÄÎÖÅ Í∑ºÎ¨¥ (Î≥¥ÎùºÏÉâ)
        "D" -> Color(0xFFFFF8BF) // ÎÇÆ Í∑ºÎ¨¥ (ÎÖ∏ÎûÄÏÉâ)
        else -> Color.Transparent
    }
}

// ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
fun getSampleGroup(groupId: Int): GroupDto {
    return GroupDto(
        groupId = groupId,
        groupName = "Í∑∏Î£π $groupId",
        groupIconType = R.drawable.icon_profile,
        groupMemberCount = 6
    )
}


fun getSampleMembers(): List<GroupMemberResponse> {
    return listOf(
        GroupMemberResponse("john_doe", "ÏÑúÏ†ïÌõÑ", "ÏÑúÏö∏Î≥ëÏõê", "ssafy", "ÏùëÍ∏âÏã§"),
        GroupMemberResponse("han_ahyoung", "ÌïúÏïÑÏòÅ", "ÏÑúÏö∏Î≥ëÏõê", "ssafy", "ÏùëÍ∏âÏã§"),
        GroupMemberResponse("lee_seungji", "Ïù¥ÏäπÏßÄ", "ÏÑúÏö∏Î≥ëÏõê", "ssafy", "ÏùëÍ∏âÏã§"),

        )
}